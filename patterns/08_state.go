package patterns

import "fmt"

// реализовать паттерн Состояние
// объяснить применимость паттерна, его плюсы и минусы, а так же
// примеры использования данного паттерна на практике.

// состояние - поведенческий паттерн проектирования, позволяющий объекту
// изменять своё поведение в зависимости от внутреннего состояния. При этом
// объект будет выглядеть так, будто изменился его класс. Применяется в тех
// случаях, когда во время выполнения программы объект должен менять своё
// поведение в зависимости от состояния или стадии выолнения программы.
// в общем случае паттерн применяется тогда, когда поведение отдельного объекта
// программы кардинально меняется в процессе выполнения программы и таких
// состояний много. когда код класса содержит множество больших, похожих друг на
// друга, условных операторов, которые выбирают поведения в зависимости от
// текущих значений полей класса

// плюсы: избавляет от множества больших условных операторов, концентрирует
// в одном месте код, связанный с определённым состоянием, упрощает код
// контекста.

// минусы: может неоправданно усложнить код программы, если состояний мало и они
// редко меняются.

// примеры использования: представление заказа в интернет-магазине (заказ может
// находиться в различных состояниях: новый, оплаченный, отправленный,
// доставленный) - в первом случае заказ можно изменить, добавить товари и
// оплатить, во втором - отправить, но изменить уже нельзя, только отменить, в
// третьем - отследить, но ни изменить, ни отменить уже нельзя, в четвёртом -
// можно получить заказ, оставить отзыв, оформить возврат и т.д.

// интерфейс состояния заказа
type OrderState interface {
	AddItem(item string)
	Pay()
	Ship()
}

// состояние заказа - новый
type NewOrderState struct{}

func (s *NewOrderState) AddItem(item string) {
	fmt.Println("Добавляем товар", item, "в заказ")
}

func (s *NewOrderState) Pay() {
	fmt.Println("Заказ оплачен")
}

func (s *NewOrderState) Ship() {
	fmt.Println("Невозможно отправить заказ - оплата не завершена")
}

// состояние заказа - оплаченный
type PaidOrderState struct{}

func (s *PaidOrderState) AddItem(item string) {
	fmt.Println("Невозможно добавить товар в оплаченный заказ")
}

func (s *PaidOrderState) Pay() {
	fmt.Println("Заказ уже оплачен")
}

func (s *PaidOrderState) Ship() {
	fmt.Println("Заказ отправлен")
}

// контекст заказа
type Order struct {
	State OrderState
}

func (o *Order) SetState(state OrderState) {
	o.State = state
}

func (o *Order) AddItem(item string) {
	o.State.AddItem(item)
}

func (o *Order) Pay() {
	o.State.Pay()
}

func (o *Order) Ship() {
	o.State.Ship()
}

// пример использования
// func main() {
// 	order := Order{State: &NewOrderState{}}
//  order.AddItem("Туфли")
//  order.AddItem("Шорты")
//  order.Ship()
//  order.Pay()
//  order.SetState(&PaidOrderState{})
//  order.AddItem("Футболка")
//  order.Pay()
//  order.Ship()
// }
// >> Добавляем товар Туфли в заказ
// >> Добавляем товар Шорты в заказ
// >> Невозможно отправить заказ - оплата не завершена
// >> Заказ оплачен
// >> Невозможно добавить товар в оплаченный заказ
// >> Заказ уже оплачен
// >> Заказ отправлен
